// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id            String   @id @default(uuid())
  title         String
  slug          String   @unique
  contents      String
  authorName    String
  datePublished DateTime
  imageUrl      String
  tag           String

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  highlight  Highlight?
  topPick    TopPick?
  popular    Popular?
  category   Category?  @relation(fields: [categoryId], references: [id])
  categoryId String?
}

model Highlight {
  articleId String  @unique
  article   Article @relation(fields: [articleId], references: [id])
}

model TopPick {
  articleId String  @unique
  article   Article @relation(fields: [articleId], references: [id])
}

model Popular {
  articleId String  @unique
  article   Article @relation(fields: [articleId], references: [id])
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  slug    String    @unique
  article Article[]
}

model Project {
  id   String   @unique @default(uuid())
  name String   @unique
  tag  String[]
  port String   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  article    Article[]
  Deployment Deployment[]
}

model Deployment {
  id        String  @unique
  status    String
  name      String
  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
