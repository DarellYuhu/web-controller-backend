// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  username  String   @unique
  password  String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Article {
  id            String    @id @default(uuid())
  title         String
  slug          String    @unique
  imgPrompt     String?
  contents      String?
  datePublished DateTime?
  tagId         String?
  authorId      String?
  projectId     String?
  categoryId    String?
  imageId       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image    File?     @relation(fields: [imageId], references: [id])
  author   Author?   @relation(fields: [authorId], references: [id])
  tag      Tag?      @relation(fields: [tagId], references: [id])
  project  Project?  @relation(fields: [projectId], references: [id])
  category Category? @relation(fields: [categoryId], references: [id])
  Section  Section?
}

model File {
  id          String @id @default(uuid())
  name        String
  bucket      String
  path        String
  fullPath    String
  contentType String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Article   Article[]
  icon      Project[] @relation(name: "icon")
  logo      Project[] @relation(name: "logo")
}

model Section {
  articleId String      @unique
  article   Article     @relation(fields: [articleId], references: [id])
  projectId String
  project   Project     @relation(fields: [projectId], references: [id])
  type      SectionType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([articleId, projectId])
}

model Category {
  id   String @id @default(uuid())
  name String @unique
  slug String @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  article   Article[]
}

model Author {
  id   String @id @default(uuid())
  name String @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Article   Article[]
}

model ProjectTag {
  projectId String
  tagId     String

  project Project @relation(fields: [projectId], references: [id])
  tag     Tag     @relation(fields: [tagId], references: [id])

  @@unique([projectId, tagId])
}

model Tag {
  id         String       @id @default(uuid())
  name       String       @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  article    Article[]
  projectTag ProjectTag[]
}

model Whitelist {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          String  @unique @default(uuid())
  name        String
  slug        String  @unique
  port        Int     @unique
  description String
  iconId      String?
  logoId      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  icon       File?        @relation(fields: [iconId], references: [id], name: "icon")
  logo       File?        @relation(fields: [logoId], references: [id], name: "logo")
  article    Article[]
  Deployment Deployment[]
  projectTag ProjectTag[]
  section    Section[]
}

model Deployment {
  id        String  @unique
  status    String
  name      String
  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
}

enum SectionType {
  Highlight
  TopPick
  Popular
}
