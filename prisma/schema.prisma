// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id            String    @id @default(uuid())
  title         String
  slug          String    @unique
  imgPrompt     String?
  contents      String?
  datePublished DateTime?
  tagId         String?
  authorId      String?
  projectId     String?
  categoryId    String?
  imageId       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  highlight Highlight?
  topPick   TopPick?
  popular   Popular?
  image     File?      @relation(fields: [imageId], references: [id])
  author    Author?    @relation(fields: [authorId], references: [id])
  tag       Tag?       @relation(fields: [tagId], references: [id])
  project   Project?   @relation(fields: [projectId], references: [id])
  category  Category?  @relation(fields: [categoryId], references: [id])
}

model File {
  id          String @id @default(uuid())
  name        String
  path        String
  contentType String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Article   Article[]
}

model Highlight {
  articleId String  @unique
  article   Article @relation(fields: [articleId], references: [id])
}

model TopPick {
  articleId String  @unique
  article   Article @relation(fields: [articleId], references: [id])
}

model Popular {
  articleId String  @unique
  article   Article @relation(fields: [articleId], references: [id])
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  slug    String    @unique
  article Article[]
}

model Author {
  id   String @id @default(uuid())
  name String @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Article   Article[]
}

model ProjectTag {
  projectId String
  tagId     String

  project Project @relation(fields: [projectId], references: [id])
  tag     Tag     @relation(fields: [tagId], references: [id])

  @@unique([projectId, tagId])
}

model Tag {
  id         String       @id @default(uuid())
  name       String       @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  article    Article[]
  projectTag ProjectTag[]
}

model Whitelist {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id   String @unique @default(uuid())
  name String @unique
  port Int    @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  article    Article[]
  Deployment Deployment[]
  projectTag ProjectTag[]
}

model Deployment {
  id        String  @unique
  status    String
  name      String
  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
